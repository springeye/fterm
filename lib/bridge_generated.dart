// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.77.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:ffi' as ffi;

class RustFfiImpl implements RustFfi {
  final RustFfiPlatform _platform;
  factory RustFfiImpl(ExternalLibrary dylib) =>
      RustFfiImpl.raw(RustFfiPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory RustFfiImpl.wasm(FutureOr<WasmModule> module) =>
      RustFfiImpl(module as ExternalLibrary);
  RustFfiImpl.raw(this._platform);
  Future<int> insert({String? path, required Host host, dynamic hint}) {
    var arg0 = _platform.api2wire_opt_String(path);
    var arg1 = _platform.api2wire_box_autoadd_host(host);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_insert(port_, arg0, arg1),
      parseSuccessData: _wire2api_usize,
      constMeta: kInsertConstMeta,
      argValues: [path, host],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInsertConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "insert",
        argNames: ["path", "host"],
      );

  Future<int> update({String? path, required Host host, dynamic hint}) {
    var arg0 = _platform.api2wire_opt_String(path);
    var arg1 = _platform.api2wire_box_autoadd_host(host);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_update(port_, arg0, arg1),
      parseSuccessData: _wire2api_usize,
      constMeta: kUpdateConstMeta,
      argValues: [path, host],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUpdateConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "update",
        argNames: ["path", "host"],
      );

  Future<int> delete({String? path, required String id, dynamic hint}) {
    var arg0 = _platform.api2wire_opt_String(path);
    var arg1 = _platform.api2wire_String(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_delete(port_, arg0, arg1),
      parseSuccessData: _wire2api_usize,
      constMeta: kDeleteConstMeta,
      argValues: [path, id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDeleteConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "delete",
        argNames: ["path", "id"],
      );

  Future<List<Host>> findAll({String? path, dynamic hint}) {
    var arg0 = _platform.api2wire_opt_String(path);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_findAll(port_, arg0),
      parseSuccessData: _wire2api_list_host,
      constMeta: kFindAllConstMeta,
      argValues: [path],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kFindAllConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "findAll",
        argNames: ["path"],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  Host _wire2api_host(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return Host(
      id: _wire2api_String(arr[0]),
      title: _wire2api_String(arr[1]),
      host: _wire2api_String(arr[2]),
      port: _wire2api_u32(arr[3]),
      username: _wire2api_String(arr[4]),
      password: _wire2api_opt_String(arr[5]),
      privateKey: _wire2api_opt_String(arr[6]),
    );
  }

  List<Host> _wire2api_list_host(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_host).toList();
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  int _wire2api_u32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  int _wire2api_usize(dynamic raw) {
    return castInt(raw);
  }
}

// Section: api2wire

@protected
int api2wire_u32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class RustFfiPlatform extends FlutterRustBridgeBase<RustFfiWire> {
  RustFfiPlatform(ffi.DynamicLibrary dylib) : super(RustFfiWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_Host> api2wire_box_autoadd_host(Host raw) {
    final ptr = inner.new_box_autoadd_host_0();
    _api_fill_to_wire_host(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : api2wire_String(raw);
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

// Section: api_fill_to_wire

  void _api_fill_to_wire_box_autoadd_host(
      Host apiObj, ffi.Pointer<wire_Host> wireObj) {
    _api_fill_to_wire_host(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_host(Host apiObj, wire_Host wireObj) {
    wireObj.id = api2wire_String(apiObj.id);
    wireObj.title = api2wire_String(apiObj.title);
    wireObj.host = api2wire_String(apiObj.host);
    wireObj.port = api2wire_u32(apiObj.port);
    wireObj.username = api2wire_String(apiObj.username);
    wireObj.password = api2wire_opt_String(apiObj.password);
    wireObj.private_key = api2wire_opt_String(apiObj.privateKey);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class RustFfiWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustFfiWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RustFfiWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_insert(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
    ffi.Pointer<wire_Host> host,
  ) {
    return _wire_insert(
      port_,
      path,
      host,
    );
  }

  late final _wire_insertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_Host>)>>('wire_insert');
  late final _wire_insert = _wire_insertPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_Host>)>();

  void wire_update(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
    ffi.Pointer<wire_Host> host,
  ) {
    return _wire_update(
      port_,
      path,
      host,
    );
  }

  late final _wire_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_Host>)>>('wire_update');
  late final _wire_update = _wire_updatePtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_Host>)>();

  void wire_delete(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
    ffi.Pointer<wire_uint_8_list> id,
  ) {
    return _wire_delete(
      port_,
      path,
      id,
    );
  }

  late final _wire_deletePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_delete');
  late final _wire_delete = _wire_deletePtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_findAll(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
  ) {
    return _wire_findAll(
      port_,
      path,
    );
  }

  late final _wire_findAllPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_findAll');
  late final _wire_findAll = _wire_findAllPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  ffi.Pointer<wire_Host> new_box_autoadd_host_0() {
    return _new_box_autoadd_host_0();
  }

  late final _new_box_autoadd_host_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Host> Function()>>(
          'new_box_autoadd_host_0');
  late final _new_box_autoadd_host_0 = _new_box_autoadd_host_0Ptr
      .asFunction<ffi.Pointer<wire_Host> Function()>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

final class _Dart_Handle extends ffi.Opaque {}

final class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_Host extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> id;

  external ffi.Pointer<wire_uint_8_list> title;

  external ffi.Pointer<wire_uint_8_list> host;

  @ffi.Uint32()
  external int port;

  external ffi.Pointer<wire_uint_8_list> username;

  external ffi.Pointer<wire_uint_8_list> password;

  external ffi.Pointer<wire_uint_8_list> private_key;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
