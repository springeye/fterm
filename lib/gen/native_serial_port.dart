// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.77.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;

import 'dart:ffi' as ffi;

part 'native_serial_port.freezed.dart';

abstract class NativeSerialPort {
  Future<List<SerialPortInfo>> list({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kListConstMeta;
}

class SerialPortInfo {
  final String portName;
  final SerialPortType portType;

  const SerialPortInfo({
    required this.portName,
    required this.portType,
  });
}

@freezed
class SerialPortType with _$SerialPortType {
  /// The serial port is connected via USB
  const factory SerialPortType.usbPort(
    UsbPortInfo field0,
  ) = SerialPortType_UsbPort;

  /// The serial port is connected via PCI (permanent port)
  const factory SerialPortType.pciPort() = SerialPortType_PciPort;

  /// The serial port is connected via Bluetooth
  const factory SerialPortType.bluetoothPort() = SerialPortType_BluetoothPort;

  /// It can't be determined how the serial port is connected
  const factory SerialPortType.unknown() = SerialPortType_Unknown;
}

class UsbPortInfo {
  /// Vendor ID
  final int vid;

  /// Product ID
  final int pid;

  /// Serial number (arbitrary string)
  final String? serialNumber;

  /// Manufacturer (arbitrary string)
  final String? manufacturer;

  /// Product name (arbitrary string)
  final String? product;

  /// Interface (id number for multiplexed devices)
  final int? interface;

  const UsbPortInfo({
    required this.vid,
    required this.pid,
    this.serialNumber,
    this.manufacturer,
    this.product,
    this.interface,
  });
}

class NativeSerialPortImpl implements NativeSerialPort {
  final NativeSerialPortPlatform _platform;
  factory NativeSerialPortImpl(ExternalLibrary dylib) =>
      NativeSerialPortImpl.raw(NativeSerialPortPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory NativeSerialPortImpl.wasm(FutureOr<WasmModule> module) =>
      NativeSerialPortImpl(module as ExternalLibrary);
  NativeSerialPortImpl.raw(this._platform);
  Future<List<SerialPortInfo>> list({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_list(port_),
      parseSuccessData: _wire2api_list_serial_port_info,
      constMeta: kListConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kListConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "list",
        argNames: [],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  int _wire2api_box_autoadd_u8(dynamic raw) {
    return raw as int;
  }

  UsbPortInfo _wire2api_box_autoadd_usb_port_info(dynamic raw) {
    return _wire2api_usb_port_info(raw);
  }

  List<SerialPortInfo> _wire2api_list_serial_port_info(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_serial_port_info).toList();
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  int? _wire2api_opt_box_autoadd_u8(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_u8(raw);
  }

  SerialPortInfo _wire2api_serial_port_info(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return SerialPortInfo(
      portName: _wire2api_String(arr[0]),
      portType: _wire2api_serial_port_type(arr[1]),
    );
  }

  SerialPortType _wire2api_serial_port_type(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return SerialPortType_UsbPort(
          _wire2api_box_autoadd_usb_port_info(raw[1]),
        );
      case 1:
        return SerialPortType_PciPort();
      case 2:
        return SerialPortType_BluetoothPort();
      case 3:
        return SerialPortType_Unknown();
      default:
        throw Exception("unreachable");
    }
  }

  int _wire2api_u16(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  UsbPortInfo _wire2api_usb_port_info(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return UsbPortInfo(
      vid: _wire2api_u16(arr[0]),
      pid: _wire2api_u16(arr[1]),
      serialNumber: _wire2api_opt_String(arr[2]),
      manufacturer: _wire2api_opt_String(arr[3]),
      product: _wire2api_opt_String(arr[4]),
      interface: _wire2api_opt_box_autoadd_u8(arr[5]),
    );
  }
}

// Section: api2wire

// Section: finalizer

class NativeSerialPortPlatform
    extends FlutterRustBridgeBase<NativeSerialPortWire> {
  NativeSerialPortPlatform(ffi.DynamicLibrary dylib)
      : super(NativeSerialPortWire(dylib));

// Section: api2wire

// Section: finalizer

// Section: api_fill_to_wire
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class NativeSerialPortWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeSerialPortWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeSerialPortWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_list(
    int port_,
  ) {
    return _wire_list(
      port_,
    );
  }

  late final _wire_listPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_list');
  late final _wire_list = _wire_listPtr.asFunction<void Function(int)>();

  ffi.Pointer<wire_DAVClient> new_box_autoadd_dav_client_1() {
    return _new_box_autoadd_dav_client_1();
  }

  late final _new_box_autoadd_dav_client_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_DAVClient> Function()>>(
          'new_box_autoadd_dav_client_1');
  late final _new_box_autoadd_dav_client_1 = _new_box_autoadd_dav_client_1Ptr
      .asFunction<ffi.Pointer<wire_DAVClient> Function()>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

final class _Dart_Handle extends ffi.Opaque {}

final class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_DAVClient extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> url;

  external ffi.Pointer<wire_uint_8_list> username;

  external ffi.Pointer<wire_uint_8_list> password;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
