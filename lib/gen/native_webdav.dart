// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.77.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:ffi' as ffi;

abstract class NativeWebDAV {
  Future<DAVClient> newClient(
      {required String url,
      required String username,
      required String password,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewClientConstMeta;

  Future<bool> writeMethodDavClient(
      {required DAVClient that,
      required String path,
      required Uint8List data,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kWriteMethodDavClientConstMeta;

  Future<Uint8List> readMethodDavClient(
      {required DAVClient that, required String path, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kReadMethodDavClientConstMeta;
}

class DAVClient {
  final NativeWebDAV bridge;
  final String url;
  final String username;
  final String password;

  const DAVClient({
    required this.bridge,
    required this.url,
    required this.username,
    required this.password,
  });

  Future<bool> write(
          {required String path, required Uint8List data, dynamic hint}) =>
      bridge.writeMethodDavClient(
        that: this,
        path: path,
        data: data,
      );

  Future<Uint8List> read({required String path, dynamic hint}) =>
      bridge.readMethodDavClient(
        that: this,
        path: path,
      );
}

class NativeWebDAVImpl implements NativeWebDAV {
  final NativeWebDAVPlatform _platform;
  factory NativeWebDAVImpl(ExternalLibrary dylib) =>
      NativeWebDAVImpl.raw(NativeWebDAVPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory NativeWebDAVImpl.wasm(FutureOr<WasmModule> module) =>
      NativeWebDAVImpl(module as ExternalLibrary);
  NativeWebDAVImpl.raw(this._platform);
  Future<DAVClient> newClient(
      {required String url,
      required String username,
      required String password,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(url);
    var arg1 = _platform.api2wire_String(username);
    var arg2 = _platform.api2wire_String(password);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_new_client(port_, arg0, arg1, arg2),
      parseSuccessData: (d) => _wire2api_dav_client(d),
      constMeta: kNewClientConstMeta,
      argValues: [url, username, password],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewClientConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "new_client",
        argNames: ["url", "username", "password"],
      );

  Future<bool> writeMethodDavClient(
      {required DAVClient that,
      required String path,
      required Uint8List data,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_dav_client(that);
    var arg1 = _platform.api2wire_String(path);
    var arg2 = _platform.api2wire_uint_8_list(data);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_write__method__DAVClient(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_bool,
      constMeta: kWriteMethodDavClientConstMeta,
      argValues: [that, path, data],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kWriteMethodDavClientConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "write__method__DAVClient",
        argNames: ["that", "path", "data"],
      );

  Future<Uint8List> readMethodDavClient(
      {required DAVClient that, required String path, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_dav_client(that);
    var arg1 = _platform.api2wire_String(path);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_read__method__DAVClient(port_, arg0, arg1),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kReadMethodDavClientConstMeta,
      argValues: [that, path],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kReadMethodDavClientConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "read__method__DAVClient",
        argNames: ["that", "path"],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  DAVClient _wire2api_dav_client(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return DAVClient(
      bridge: this,
      url: _wire2api_String(arr[0]),
      username: _wire2api_String(arr[1]),
      password: _wire2api_String(arr[2]),
    );
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }
}

// Section: api2wire

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class NativeWebDAVPlatform extends FlutterRustBridgeBase<NativeWebDAVWire> {
  NativeWebDAVPlatform(ffi.DynamicLibrary dylib)
      : super(NativeWebDAVWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_DAVClient> api2wire_box_autoadd_dav_client(DAVClient raw) {
    final ptr = inner.new_box_autoadd_dav_client_1();
    _api_fill_to_wire_dav_client(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_1(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

// Section: api_fill_to_wire

  void _api_fill_to_wire_box_autoadd_dav_client(
      DAVClient apiObj, ffi.Pointer<wire_DAVClient> wireObj) {
    _api_fill_to_wire_dav_client(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_dav_client(DAVClient apiObj, wire_DAVClient wireObj) {
    wireObj.url = api2wire_String(apiObj.url);
    wireObj.username = api2wire_String(apiObj.username);
    wireObj.password = api2wire_String(apiObj.password);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class NativeWebDAVWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeWebDAVWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeWebDAVWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void wire_open(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
    int baud_rate,
    int timeout_millis,
  ) {
    return _wire_open(
      port_,
      path,
      baud_rate,
      timeout_millis,
    );
  }

  late final _wire_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Uint32, ffi.Uint64)>>('wire_open');
  late final _wire_open = _wire_openPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>, int, int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_2(
    int len,
  ) {
    return _new_uint_8_list_2(
      len,
    );
  }

  late final _new_uint_8_list_2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_2');
  late final _new_uint_8_list_2 = _new_uint_8_list_2Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void drop_opaque_BoxSerialPort(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_BoxSerialPort(
      ptr,
    );
  }

  late final _drop_opaque_BoxSerialPortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_BoxSerialPort');
  late final _drop_opaque_BoxSerialPort = _drop_opaque_BoxSerialPortPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_BoxSerialPort(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_BoxSerialPort(
      ptr,
    );
  }

  late final _share_opaque_BoxSerialPortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_BoxSerialPort');
  late final _share_opaque_BoxSerialPort = _share_opaque_BoxSerialPortPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_new_client(
    int port_,
    ffi.Pointer<wire_uint_8_list> url,
    ffi.Pointer<wire_uint_8_list> username,
    ffi.Pointer<wire_uint_8_list> password,
  ) {
    return _wire_new_client(
      port_,
      url,
      username,
      password,
    );
  }

  late final _wire_new_clientPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_new_client');
  late final _wire_new_client = _wire_new_clientPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_write__method__DAVClient(
    int port_,
    ffi.Pointer<wire_DAVClient> that,
    ffi.Pointer<wire_uint_8_list> path,
    ffi.Pointer<wire_uint_8_list> data,
  ) {
    return _wire_write__method__DAVClient(
      port_,
      that,
      path,
      data,
    );
  }

  late final _wire_write__method__DAVClientPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_DAVClient>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_write__method__DAVClient');
  late final _wire_write__method__DAVClient =
      _wire_write__method__DAVClientPtr.asFunction<
          void Function(int, ffi.Pointer<wire_DAVClient>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_read__method__DAVClient(
    int port_,
    ffi.Pointer<wire_DAVClient> that,
    ffi.Pointer<wire_uint_8_list> path,
  ) {
    return _wire_read__method__DAVClient(
      port_,
      that,
      path,
    );
  }

  late final _wire_read__method__DAVClientPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_DAVClient>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_read__method__DAVClient');
  late final _wire_read__method__DAVClient =
      _wire_read__method__DAVClientPtr.asFunction<
          void Function(int, ffi.Pointer<wire_DAVClient>,
              ffi.Pointer<wire_uint_8_list>)>();

  ffi.Pointer<wire_DAVClient> new_box_autoadd_dav_client_1() {
    return _new_box_autoadd_dav_client_1();
  }

  late final _new_box_autoadd_dav_client_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_DAVClient> Function()>>(
          'new_box_autoadd_dav_client_1');
  late final _new_box_autoadd_dav_client_1 = _new_box_autoadd_dav_client_1Ptr
      .asFunction<ffi.Pointer<wire_DAVClient> Function()>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_1(
    int len,
  ) {
    return _new_uint_8_list_1(
      len,
    );
  }

  late final _new_uint_8_list_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_1');
  late final _new_uint_8_list_1 = _new_uint_8_list_1Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

final class _Dart_Handle extends ffi.Opaque {}

final class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_DAVClient extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> url;

  external ffi.Pointer<wire_uint_8_list> username;

  external ffi.Pointer<wire_uint_8_list> password;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
