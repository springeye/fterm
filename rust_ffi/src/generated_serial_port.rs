#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.77.1.

use crate::serial_port::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

// Section: wire functions

fn wire_list_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "list",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            move |task_callback| {
                Ok(list()
                    .into_iter()
                    .map(|v| mirror_SerialPortInfo(v))
                    .collect::<Vec<_>>())
            }
        },
    )
}
// Section: wrapper structs

#[derive(Clone)]
struct mirror_SerialPortInfo(SerialPortInfo);

#[derive(Clone)]
struct mirror_SerialPortType(SerialPortType);

#[derive(Clone)]
struct mirror_UsbPortInfo(UsbPortInfo);

// Section: static checks

const _: fn() = || {
    {
        let SerialPortInfo = None::<SerialPortInfo>.unwrap();
        let _: String = SerialPortInfo.port_name;
        let _: SerialPortType = SerialPortInfo.port_type;
    }
    match None::<SerialPortType>.unwrap() {
        SerialPortType::UsbPort(field0) => {
            let _: UsbPortInfo = field0;
        }
        SerialPortType::PciPort => {}
        SerialPortType::BluetoothPort => {}
        SerialPortType::Unknown => {}
    }
    {
        let UsbPortInfo = None::<UsbPortInfo>.unwrap();
        let _: u16 = UsbPortInfo.vid;
        let _: u16 = UsbPortInfo.pid;
        let _: Option<String> = UsbPortInfo.serial_number;
        let _: Option<String> = UsbPortInfo.manufacturer;
        let _: Option<String> = UsbPortInfo.product;
        let _: Option<u8> = UsbPortInfo.interface;
    }
};
// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}
// Section: impl IntoDart

impl support::IntoDart for mirror_SerialPortInfo {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.0.port_name.into_dart(),
            mirror_SerialPortType(self.0.port_type).into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_SerialPortInfo {}

impl support::IntoDart for mirror_SerialPortType {
    fn into_dart(self) -> support::DartAbi {
        match self.0 {
            SerialPortType::UsbPort(field0) => {
                vec![0.into_dart(), mirror_UsbPortInfo(field0).into_dart()]
            }
            SerialPortType::PciPort => vec![1.into_dart()],
            SerialPortType::BluetoothPort => vec![2.into_dart()],
            SerialPortType::Unknown => vec![3.into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_SerialPortType {}

impl support::IntoDart for mirror_UsbPortInfo {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.0.vid.into_dart(),
            self.0.pid.into_dart(),
            self.0.serial_number.into_dart(),
            self.0.manufacturer.into_dart(),
            self.0.product.into_dart(),
            self.0.interface.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_UsbPortInfo {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "generated_serial_port.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
